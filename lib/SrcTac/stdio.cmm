/*
 * Programingxx Language C-- "Compiler"
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2016 - 2019 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * lib/stdio.cmm : TacOS 用の入出力ルーチン
 *
 * 2019.11.18 : fsize() が stat システムコールを使用するように変更
 * 2019.10.18 : ttyRead/ttyWrite は '\0' に依存しないのでバッファを１短く
 * 2019.10.10 : TacOSとの整合を取るため、fillBuf(), fputc(), fflush()を修正
 * 2019.03.14 : fputs()，puts()の型をbooleanに変更
 * 2019.03.11 : subStr()を使用しないようにfsize()を書き換え
 * 2019.01.10 : perror にエラー追加（EMEMVIO）
 * 2018.12.03 : readDir が 0x05 のエントリを無視するバグ修正
 * 2018.02.22 : fsize 追加
 * 2018.02.20 : fseek 追加
 * 2016.02.25 : TacOS の usr/lib/lib.cmm をもとに作成
 *
 * $Id$
 */

#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <ctype.hmm>
#include <syslib.hmm>
#include <errno.hmm>
#include <sys/fs.hmm>

// 標準 I/O
#define FMAX 5                     // TacOS で１ユーザプロセスの最大ファイル数
#define TSIZ 80                    // コンソールI/Oのバッファサイズ
#define DSIZ 128                   // ディスクI/Oのバッファサイズ

FILE[] allFiles = array(3+FMAX);   // オープンファイルの一覧(stdin,out,err含む)

// stdin 用のFILE構造体とバッファ
char[] stdinBuf = array(TSIZ);
public FILE stdin  = {-1, O_RDONLY,  null, TSIZ, 0, 0, true, false, false, 0};

// stdout 用のFILE構造体とバッファ
char[] stdoutBuf = array(TSIZ);
public FILE stdout = {-2, O_WRONLY, null, TSIZ, 0, 0, true, false, false, 1};

// stderr 用のFILE構造体(stderr はバッファリングしない)
public FILE stderr = {-3, O_WRONLY, null, 0, 0, 0, true, false, false, 2};

// stdio の初期化ルーチン
public void _stdioInit() {
  stdin.buf = stdinBuf;
  allFiles[0] = stdin;
  stdout.buf = stdoutBuf;
  allFiles[1] = stdout;
  allFiles[2] = stderr;                         // stderr はバッファリングしない
}

// 妥当な fp か判定する
void chkFp(FILE fp) {
  if (fp==null || fp.slot<0 || 3+FMAX<=fp.slot
      || allFiles[fp.slot]!=fp)                 // 怪しい fp なら
    _exit(EUBADF);                              // エラー終了する
}                                               // (再帰にならないように_exit)

// --------------------------- ファイルの write -------------------------------
// バッファをフラッシュする
public boolean fflush(FILE fp) {
  chkFp(fp);                                    // 妥当な fp かチェックする
  if (fp.mode==O_RDONLY) _exit(EUMODE);         // O_RDONLY はフラッシュできない
                                                // (再帰にならないように_exit)
  if (fp.err) return true;                      // 既にエラーになっている
  if (fp.buf==null) return false;               // フラッシュすべきものがない
  if (fp.cnt==0) return false;                  // フラッシュすべきものがない

  if (fp.tty) {                                 // コンソールの場合
    ttyWrite(fp.buf, fp.cnt);                   //  コンソールに送信
    fp.cnt=0;                                   //  バッファは空
  } else {                                      // ファイルの場合
    int l = write(fp.fd, fp.buf, fp.cnt);       //  バッファを出力する
    if (l>0) fp.cnt = fp.cnt - l;               //  出力しただけ cnt を減らす
  }

  return fp.eof = fp.err = fp.cnt!=0;           // バッファが空になっていない
}                                               //  ならエラー

// exit が使用する
public void _flushAll() {
  for (int i=0; i<3+FMAX; i=i+1) {
    FILE fp = allFiles[i];
    if (fp!=null && fp.mode!=O_RDONLY) fflush(fp);
  }
}

// ファイル（ストリーム）に1文字書き込む
char[] fputcBuf = array(1);                     // バッファリングしない場合使う
public boolean fputc(char c, FILE fp) {
  chkFp(fp);                                    // 妥当な fp かチェックする
  if (fp.mode==O_RDONLY) _exit(EUMODE);         // O_RDONLYモードにfputcできない
  if (fp.err) return true;                      // すでにエラーになっている
  if (fp.buf==null) {                           // バッファがない
    fputcBuf[0] = c;                            //   別のバッファに格納して
    ttyWrite(fputcBuf, 1);                      //   コンソールに送信
  } else {                                      // バッファがある
    fp.buf[fp.cnt] = c;                         //   バッファに追加する
    fp.cnt = fp.cnt + 1;
    if (fp.cnt>=fp.size || fp.tty && c=='\n')   //   バッファが一杯か改行で
      fflush(fp);                               //      write する
  }
  return fp.err;
}

public boolean putchar(char c) {
  return fputc(c, stdout);
}

// 文字列を出力する
public boolean fputs(char[] str, FILE fp) {
  for (int i=0; str[i]!='\0'; i=i+1)
    if (fputc(str[i], fp)) return true;
  return false;                                 // エラーはなかった
}

public boolean puts(char[] str) {
  return fputs(str, stdout);
}

// --------------------------- ファイルの read -------------------------------
// 読み込みバッファにデータを読む
void fillBuf(FILE fp) {
  if (fp.tty) {                                 // コンソールの場合は
    int l = ttyRead(fp.buf, fp.size);
    fp.len = l;
  } else {
    int l = read(fp.fd, fp.buf, fp.size);
    if (l<0) {
      fp.err = fp.eof = true;
      l = 0;
    } else if (l==0) {
      fp.eof = true;
    }
    fp.len = l;
  }
  fp.cnt = 0;
}

// EOFチェック
public boolean feof(FILE fp) {
  chkFp(fp);                                    // 妥当な fp かチェックする
  if (fp.mode!=O_RDONLY) _exit(EUMODE);         // O_RDONLY以外にfgetcできない
  if (fp.cnt>=fp.len) fillBuf(fp);              // バッファが空なら満たす
  return fp.eof;
}

// ファイル（ストリーム）から1文字読み込む
public char fgetc(FILE fp) {
  chkFp(fp);                                    // 妥当な fp かチェックする
  if (fp.mode!=O_RDONLY) _exit(EUMODE);         // O_RDONLY以外にfgetcできない
  if (fp.cnt>=fp.len) fillBuf(fp);              // バッファが空なら満たす
  if (fp.eof) _exit(EUEOF);                     // ユーザがEOFチェックをすべき

  char c = fp.buf[fp.cnt];                      // バッファから１文字取り出す
  fp.cnt = fp.cnt + 1;

  return c;
}

public char getchar() {
  return fgetc(stdin);
}

// 文字列を入力する
public char[] fgets(char[] str, int n, FILE fp) {
  int i = 0;                                    // 入力した文字数
  n = n - 1;                                    // '\0'の場所を作る
  while (i<n && !feof(fp)) {
    char c = str[i] = fgetc(fp);
    i = i + 1;
    if (c=='\n')  break;                        // 改行を入力した
  }
  str[i]='\0';

  if (i==0) str = null;                         // EOFかエラー
  return str;
}

// 読み込み位置を移動する
public boolean fseek(FILE fp, int offsh, int offsl){
  chkFp(fp);                                    // 妥当な fp かチェックする
  if (fp.mode!=O_RDONLY) fflush(fp);            // 出力ならバッファを空にする

  int r=seek(fp.fd, offsh, offsl);              // seek する
  if (r!=0) _exit(r);                           // seek エラーなら終了

  if (fp.mode==O_RDONLY) fillBuf(fp);           // 入力ならバッファを満たす
  return false;                                 // 今のところいつも正常終了
}

// ファイルサイズを調べる
#define PSN(c) ((c)=='.'||(c)=='/'||(c)=='\0')  // ファイル名本体が終わっている
#define SN(c)  ((c)=='/'||(c)=='\0')            // 拡張子を含めて終わっている

boolean sameFname(char[] fname, char[] path, int p) { // ファイル名用の比較関数
  char pc = path[p];                            // pathの着目位置の文字
  for (int i=0; i<8; i=i+1) {                   // ファイル名8文字を比較する
    char fc = fname[i];
    if (PSN(pc) && fc==' ') break;              // ファイル名本体が一致
    if (toUpper(pc)!=toUpper(fc)) return false; // 異なる文字が含まれる
    p = p + 1;
    pc = path[p];
  }
  if (!PSN(pc)) return false;                   // ファイル名本体が8文字以上
  if (SN(pc)) return fname[8]==' ';             // パスが終わっている
  // ここからは pc が '.' のときしか実行されない．
  p = p + 1;                                    // '.' を読み飛ばす
  pc = path[p];
  for (int i=8; i<11; i=i+1) {                  // 拡張子3文字を比較する
    char fc = fname[i];
    if (SN(pc) && fc==' ') break;               // 拡張子が一致して終わった
    if (toUpper(pc)!=toUpper(fc)) return false; // 異なる文字が含まれる
    p = p + 1;
    pc = path[p];
  }
  return SN(pc);                                // 拡張子の最後なら一致
}

Stat statmp;                                    // stat の結果を格納する
public boolean fsize(char[] path, int[] size) {
  char[] buf = malloc(81);
  int e = absPath(path, buf, 81);               // 絶対パスに変換
  if (e < 0) _exit(e);                          // パスのエラー
  e = stat(buf, statmp);                        // stat システムコール
  free(buf);
  if (e<0) _exit(e);                            // stat エラーなら終了
  size[0] = statmp.lenH;
  size[1] = statmp.lenL;
  return false;
}

// ------------------------- ファイルの open/close ----------------------------
// allFiles に空きスロットを捜す
int srchSlot() {
  int n=-1;
  for (int i=0; i<3+FMAX; i=i+1) {
    if (allFiles[i]==null) {
      n = i;
      break;
    }
  }
  if (n<0) _exit(EUNFILE);                      // 空きスロットが見つからない
  return n;
}

// FILE 構造体を割当てる
FILE allocFile(int fd, int mode, int siz) {
  int slot = srchSlot();                        // 空きスロットを探す
  FILE fp = calloc(1, sizeof(FILE));            // calloc はメモリクリアもする
  fp.fd =fd;
  fp.mode = mode;
  fp.buf = malloc(siz);                         // バッファを割当てる
  fp.size = siz;
  allFiles[slot] = fp;                          // スロットに登録
  fp.slot = slot;                               // スロットを記録
  return fp;
}

// リードモードオープン
FILE rdOpen(char[] name) {
  int fd = open(name, O_RDONLY);                // O_RDONLYモードでファイルオープン
  if (fd<0) return null;                        // 原因はopenがerrnoに記録済み
  FILE fp = allocFile(fd, O_RDONLY, DSIZ);      // FILE 構造体を割当てる
  return fp;
}

// アペンド/ライトモードオープン
FILE awOpen(char[] name, int mode) {
  int fd = open(name, mode);                    // ファイルオープン
  if (fd<0) {                                   // ファイルが存在しないなら
    if (errno==ENOENT && creat(name)>=0)        //  creat でファイルを作成する
      fd = open(name, mode);                    //  もう一度オープンしてみる
    if (fd<0) return null;                      // それでもだめならエラー
  }
  return allocFile(fd, mode, DSIZ);             // FILE 構造体を割当てる
}

// ファイルオープン
public FILE fopen(char[] name, char[] mode) {
  char[] buffer = malloc(256);
  absPath(name, buffer, 256);
  FILE fp;
  if (strCmp(mode, "r")==0)
    fp = rdOpen(buffer);                        // リードオープン
  else if (strCmp(mode, "w")==0)
    fp = awOpen(buffer, O_WRONLY);              // ライトオープン
  else if (strCmp(mode, "a")==0)
    fp = awOpen(buffer, O_APPEND);              // アペンドオープン
  free(buffer);

  if (fp == null) _exit(EUMODE);                // モードが不正
  return fp;
}

// ファイルクローズ
public boolean fclose(FILE fp) {
  chkFp(fp);                                    // 妥当な fp かチェックする
  if (fp.slot<3) _exit(EUSTDIO);                // 標準 I/O はクローズ禁止
  if (fp.mode!=O_RDONLY && fflush(fp))          // O_WRONLY, O_APPEND ならフラッシュ
    return true;                                //  フラッシュエラーなら戻る

  if (close(fp.fd)<0) {                         // ファイルをクローズする
    fp.eof = fp.err = true;                     //  クローズできなかった
    return true;                                //   エラーで戻る
  }

  if (fp.buf!=null) free(fp.buf);               // バッファを解放して
  allFiles[fp.slot]=null;                       // スロットを解放して
  free(fp);                                     // 構造体を解放する
  return false;
}

// エラーチェック
public boolean ferror(FILE fp) {
  chkFp(fp);                                    // 妥当な fp かチェックする
  return fp.err;
}

// ------------------------------- エラー処理 ------------------------------
char[][] errList = {                            // エラーメッセージリスト
  "Undefined error",                            // エラー番号 0 は存在しない

  // カーネルまたはサーバが検知するエラー
  "Invalid file name",                          // -1  ファイル名が不正
  "No such file or directrory",                 // -2  ファイルが存在しない
  "File exists",                                // -3  同名ファイルが存在する
  "File is opened",                             // -4  オープンされている
  "File table overflow",                        // -5  システムのオープン超過
  "Bad file number",                            // -6  ファイル記述子が不正
  "No space left on device",                    // -7  デバイスに空き領域が不足
  "Bad path",                                   // -8  パスが不正
  "Bad mode",                                   // -9  モードが一致しない
  "Bad attribute",                              // -10 ファイルの属性が不正
  "Directory is not empty",                     // -11 ディレクトリが空でない
  "Invalid argument",                           // -12 引数が不正
  "Process table overflow",                     // -13 プロセスが多すぎる
  "Bad EXE file",                               // -14 EXE ファイルが不正
  "Bad MAGIC number",                           // -15 不正なマジック番号
  "Too many open files",                        // -16 プロセス毎のオープン超過
  "No children",                                // -17 子プロセスが存在しない
  "No zombie children",                         // -18 ゾンビの子が存在しない
  "Not enough memory",                          // -19 十分な空き領域が無い

  // 例外ハンドラが検知するユーザプロセスのエラー
  "Invalid system call number",                 // -20 システムコール番号が不正
  "Zero division",                              // -21 ゼロ割り算
  "Privilege violation",                        // -22 特権例外
  "Illegal instruction",                        // -23 不正命令
  "Memory violation",                           // -24 メモリ保護違反

  // ライブラリ(ユーザプロセス自身)が検知するエラー
  "Stack overflow",                             // -25 スタックオーバーフロー
  "stdio: Bad open mode",                       // -26 O_RDONLYにfputc/O_WRONLYにfgetc
  "stdio: Bad file pointer",                    // -27 不正な fp が使用された
  "fgetc: EOF was ignored",                     // -28 fgetc前にEOFチェック必要
  "fopen: Too many open files",                 // -29 プロセス毎のオープン超過
  "fclose: Standard i/o should not be closed",  // -30 標準ioはクローズできない
  "fprintf: Invalid conversion",                // -31 書式文字列に不正な変換
  "malloc: Insufficient memory",                // -32 ヒープ領域が不足
  "free: Bad address"                           // -33 mallocした領域ではない
};

public void _perror(char[] msg, int err) {
  if (err<ELAST || 0<=err) err = 0;             // 不正なerrは Undefined error
  if (msg!=null && msg[0]!='\0')                // msg があるなら
    fprintf(stderr, "%s: ", msg);               // "xxxx: "と表示
  fprintf(stderr, "%s\n", errList[-err]);       // エラーメッセージを表示
}

public void perror(char[] msg) {                // 普通はこの関数を使う
  _perror(msg, errno);
}

// ---------------------------- readDir の処理 ------------------------------

#define wordLE(b, i) ((ord((b)[(i)+1])<<8) | ord((b)[i]))
char[] buf = array(32);

public int readDir(int fd, Dir dir) {
  int r;
  while ((r=read(fd, buf, 32))>0) {            // EOF まで
    char flag = buf[0];                        //   エントリの先頭１バイト
    int  attr = ord(buf[11]);                  //   属性
    if (flag=='\x00') return 0;                //   この先に有効エントリは無い
    if (flag!='\xe5' &&                        //   有効なエントリでかつ
        (attr & 0x0a)==0) {                    //   通常ファイルかディレクトリ
      for (int i=0; i<11; i=i+1)               //     ファイル名をコピー
        dir.name[i]=buf[i];
      if (flag=='\x05') {                      //     先頭バイトの0x05は
        dir.name[0]='\xe5';                    //       SJISの0xe5にする
      }
      dir.name[11]='\0';                       //     ファイル名を完成させる
      dir.attr = attr;                         //     属性
      dir.clst = wordLE(buf, 26);              //     先頭クラスタ番号
      dir.lenH = wordLE(buf, 30);              //     ファイルサイズ上位16bit
      dir.lenL = wordLE(buf, 28);              //     ファイルサイズ下位16bit
      return 1;
    }
  }
  return r;
}
